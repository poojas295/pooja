# -*- coding: utf-8 -*-
"""cap_pro_py1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12CR1Le68NUN__IvuJL_AUS2kgabjQEWq
"""

import pyodbc as db

server = "mskl-db-server.database.windows.net"
username = "mskluser"
password = "AsDf1234"
database = "tutorials"


connectionString = 'DRIVER={SQL Server};SERVER='+server+';DATABASE='+database+';ENCRYPT=yes;UID='+username+';PWD='+ password

connection = db.connect(connectionString)
cursor = connection.cursor()

import pandas as pd
import numpy as np

claims_data=pd.read_csv(".\cars_claims.csv")

claims_data.head(100)

def ic(a):
    if (a!='YES'):
        return 1
    else:
        return 0

claims_data['Invalid_claim'] = claims_data.apply(lambda x : ic(x['police_report_available']),axis=1)

claims_data.head()

state = set(claims_data['incident_state'])

state_df=pd.DataFrame()

state_df['State']=pd.DataFrame(state)

state_df

counts =[]

claims_data = claims_data[claims_data['Claim_Processed_On'].notna()]

claims_data['Claim_Rejected'].value_counts()

for i in state:
    t=0
    for j in claims_data['incident_state']:
        if i==j:
            t=t+1
    counts.append(t)

state_df['Count']=counts

state_df

def hv(a):
    if a=="Total Loss" or a=="Major Damage":
        return 1
    else:
        return 0

claims_data['High_visibility']=claims_data.apply(lambda x: hv(x['incident_severity']),axis=1)

def hr(a,b,c):
    if a>b and a>c:
        return 1
    else:
        return 0

claims_data['High_response']=claims_data.apply(lambda x: hr(x['injury'],x['property'],x['vehicle']),axis=1)

claims_data[['High_visibility','High_response']]

claims_data.head()

d = claims_data[(claims_data['High_visibility']!=1) | (claims_data['High_response']!=1)]

pd.set_option('display.max_rows',500)
d.shape

d = d[d['Invalid_claim']==1]

d.shape

rc=[]

for i in state:
    t=0
    for j in d['incident_state']:
        if i==j:
            t=t+1
    rc.append(t)

rc

from datetime import datetime as dt

claims_data['Claim_Logged_On'] = pd.to_datetime(claims_data['Claim_Logged_On'])
claims_data['Claim_Processed_On'] = pd.to_datetime(claims_data['Claim_Processed_On'])

import numpy as np

def time(a,b):
    return (b-a)/np.timedelta64(1, 'D')

claims_data['process_time']=claims_data.apply(lambda x: time(x['Claim_Logged_On'],x['Claim_Processed_On']),axis=1)

claims_data[['High_visibility','High_response','process_time']]

claims_data.dtypes

claims_data.head()

df_filtered = claims_data[(claims_data['High_visibility']==1)]

df_filtered = df_filtered[(df_filtered['High_response']==1)]

df2 = df_filtered[df_filtered['process_time'].astype(int)<= 2]

df2.shape

df_filtered.shape

df2 = df2[df2['Invalid_claim']==1]

df2.shape

rc2=[]

for i in state:
    t=0
    for j in df2['incident_state']:
        if i==j:
            t=t+1
    rc2.append(t)

rc2

df_filtered=df_filtered[df_filtered['process_time'].astype(int)>2]

df_filtered

reporting_counts=[]

state

for i in state:
    t=0
    for j in df_filtered['incident_state']:
        if i==j:
            t=t+1
    reporting_counts.append(t)

reporting_counts

reporting_counts = np.array(reporting_counts)+np.array(rc)+np.array(rc2)

reporting_counts

state_df['reporting_counts']=reporting_counts

state_df

def ar(a,b):
    return (1-(a/b))*100

state_df['Adherence_rate']=state_df.apply(lambda x: ar(x['reporting_counts'],x['Count']),axis=1)

state_df

state_df.sort_values(by ="Adherence_rate",ascending=True,inplace=True)

state_df

state_df['Rank'] = state_df['Adherence_rate'].rank(ascending=False)

state_df

import seaborn as sns

sns.barplot(state_df['State'],state_df['Adherence_rate'])